server:
  port: 1398


spring:
  servlet:
    multipart:
      max-file-size: 200MB
      max-request-size: 200MB

  # 日期返回格式
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password:
    lettuce:
      pool:
        min-idle: 0
        max-active: 8
        max-idle: 8
        max-wait: -1ms
    connect-timeout: 30000ms

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/ftm-system?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&serverTimezone=GMT%2B8&nullCatalogMeansCurrent=true&allowPublicKeyRetrieval=true
    username: root
    password: root

  rabbitmq:
    enable: false

  data:
    mongodb:
      host: 192.168.200.125
      port: 25002
      database: DataCenter
  #      authentication-database: admin
  #      username: root
  #      password: Ry@Mysq.2021
  shardingsphere:
    datasource:
      names: m1   #配置库的名字，随意
      m1:   #配置目前m1库的数据源信息
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/shop?useUnicode=true
        username: root
        password: 123456
#    sharding:
#      tables:
#        shop:  # 指定shop表的数据分布情况，配置数据节点
#          actualDataNodes: m1.shop_0$->{1..2}
#          tableStrategy:
#            inline:   # 指定shop表的分片策略，分片策略包括分片键和分片算法
#              shardingColumn: id
#              algorithmExpression: shop_0$->{id % 2 + 1}
#          keyGenerator:   # 指定shop表的主键生成策略为SNOWFLAKE
#            type: SNOWFLAKE  #主键生成策略为SNOWFLAKE
#            column: id  #指定主键





##mongodb数据源, 用户名密码、鉴权这些省略，此处演示不配置
mongodb:
  databases:
    mongodb_1: ##这是我自定义的dbname
      name: ${mongo.DataCenter.db}
      uri: mongodb://${mongo.DataCenter.host}:${mongo.DataCenter.port}/${mongo.DataCenter.db}
      username: ${mongo.DataCenter.username:}
      password: ${mongo.DataCenter.password:}
      authenticationDatabase: ${mongo.DataCenter.authenticationDatabase:}

    mongodb_2:
      name: ${mongo.LogDB.db}
      uri: mongodb://${mongo.LogDB.host}:${mongo.LogDB.port}/${mongo.LogDB.db}
      username: ${mongo.LogDB.username:}
      password: ${mongo.LogDB.password:}
      authenticationDatabase: ${mongo.LogDB.authenticationDatabase:}


mongo:
  DataCenter:
    db: DataCenter
    host: 192.168.200.120
    port: 27017
  LogDB:
    db: LogDB
    host: 192.168.200.120
    port: 27017

mybatis-plus:
  type-aliases-package: top.anets.modules.**.entity
  # xxxMapper.xml 路径
  mapper-locations: classpath*:top/anets/modules/**/mapper/**/*.xml

file:
  ROOT_PATH: C:\Users\Administrator\Desktop\temp\imgs

#日志
logging:
  config: classpath:logback-spring.xml


xxl:
  job:
    admin:
      # xxl-job后台管理界面的地址
      addresses: http://127.0.0.1:8080/xxl-job-admin
    executor:
      # 此执行器的名称
      appname: design
      # 此执行器的端口
      port: 38801
      # 此执行器的日志存放路径
      logpath: logs/xxl-job/design
      # 此执行器的日志保存时间
      logretentiondays: 7
    accessToken: default_token


jetcache:
  # 统计间隔，0表示不统计，开启后定期在控制台输出缓存信息
  statIntervalMinutes: 15
  # 是否把cacheName作为远程缓存key前缀
  areaInCacheName: false
  # 本地缓存配置
  local:
    default: # default表示全部生效，也可以指定某个cacheName
      # 本地缓存类型，其他可选：caffeine/linkedhashmap
      type: linkedhashmap
      keyConvertor: fastjson
  # 远程缓存配置
  remote:
    default: # default表示全部生效，也可以指定某个cacheName
      type: redis
      # key转换器方式n
      keyConvertor: fastjson
      broadcastChannel: projectA
      # redis序列化方式
      valueEncoder: java
      valueDecoder: java
      # redis线程池
      poolConfig:
        minIdle: 5
        maxIdle: 20
        maxTotal: 50
      # redis地址与端口
      host: 127.0.0.1
      port: 6379


